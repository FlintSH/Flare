name: Rolling Release

on:
  push:
    branches: [ main ]
    paths-ignore: [ 'package.json' ]

jobs:
  get-commit-info:
    name: Get Commit Info
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.commit_info.outputs.sha }}
      date: ${{ steps.commit_info.outputs.date }}
      message: ${{ steps.commit_info.outputs.COMMIT_MSG }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit info
        id: commit_info
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_DATE=$(git log -1 --pretty=%cd --date=short)
          
          echo "sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "date=$COMMIT_DATE" >> $GITHUB_OUTPUT
          echo "COMMIT_MSG<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  docker-amd64:
    name: Build and Push Docker Image (AMD64)
    runs-on: ubuntu-latest
    needs: [get-commit-info]
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (AMD64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/flintsh/flare:rolling-amd64
            ghcr.io/flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }}-amd64
            flintsh/flare:rolling-amd64
            flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }}-amd64
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64

  docker-arm64:
    name: Build and Push Docker Image (ARM64)
    runs-on: ubuntu-24.04-arm
    needs: [get-commit-info]
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (ARM64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: |
            ghcr.io/flintsh/flare:rolling-arm64
            ghcr.io/flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }}-arm64
            flintsh/flare:rolling-arm64
            flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }}-arm64
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64

  docker-manifest:
    name: Create Multi-Architecture Manifest
    runs-on: ubuntu-latest
    needs: [get-commit-info, docker-amd64, docker-arm64]
    permissions:
      packages: write
      contents: read

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifests
        run: |
          # GitHub Container Registry manifests
          docker buildx imagetools create -t ghcr.io/flintsh/flare:rolling \
            ghcr.io/flintsh/flare:rolling-amd64 \
            ghcr.io/flintsh/flare:rolling-arm64
          
          docker buildx imagetools create -t ghcr.io/flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }} \
            ghcr.io/flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }}-amd64 \
            ghcr.io/flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }}-arm64
          
          # Docker Hub manifests
          docker buildx imagetools create -t flintsh/flare:rolling \
            flintsh/flare:rolling-amd64 \
            flintsh/flare:rolling-arm64
          
          docker buildx imagetools create -t flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }} \
            flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }}-amd64 \
            flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }}-arm64

  rolling-release:
    name: Create Rolling Release
    runs-on: ubuntu-latest
    needs: [get-commit-info, docker-manifest]
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create or update Rolling Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Release notes
          cat << 'EOF' > release_notes.md
          **Rolling Release** - Latest commit: `${{ needs.get-commit-info.outputs.sha }}` (${{ needs.get-commit-info.outputs.date }})
          
          ## Changes
          ${{ needs.get-commit-info.outputs.message }}
          
          ## Docker Images
          - `ghcr.io/flintsh/flare:rolling`
          - `flintsh/flare:rolling`
          - `ghcr.io/flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }}`
          - `flintsh/flare:rolling-${{ needs.get-commit-info.outputs.sha }}`
          
          > ⚠️ **Warning:** This is a bleeding edge release. These will not receive any support nor will they be considered stable.
          EOF
          
          # Create or update release
          if gh release view rolling &>/dev/null; then
            gh release edit rolling \
              --title "Rolling Release (${{ needs.get-commit-info.outputs.sha }})" \
              --notes-file release_notes.md \
              --prerelease \
              --target ${{ github.sha }}
          else
            gh release create rolling \
              --title "Rolling Release (${{ needs.get-commit-info.outputs.sha }})" \
              --notes-file release_notes.md \
              --prerelease \
              --target ${{ github.sha }}
          fi 